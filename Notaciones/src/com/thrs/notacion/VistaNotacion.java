/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.thrs.notacion;

import java.awt.Color;
import java.util.Stack;
import javax.swing.JOptionPane;

/**
 *
 * @author peter
 */
public class VistaNotacion extends javax.swing.JFrame {

    /**
     * Creates new form VistaNotacion
     */
    public VistaNotacion() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.panel.setBackground(new Color(233, 245, 219));
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    
    // Método para definir la precedencia de los operadores
    private int precedence(char op) {
        if (op == '+' || op == '-') return 1;
        if (op == '*' || op == '/') return 2;
        return 0;
    }
    
     // Método para verificar si un carácter es un operador
    private boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txInfija = new javax.swing.JTextField();
        btnPrefija = new javax.swing.JButton();
        btnPostfija = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txPrefija = new javax.swing.JTextField();
        txPostfija = new javax.swing.JTextField();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel1.setText("Conversor de Notacion Infija a Prefija y Postfija");

        jLabel2.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        jLabel2.setText("Introduce una Notacion: ");

        txInfija.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N

        btnPrefija.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        btnPrefija.setText("Prefija");
        btnPrefija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrefijaActionPerformed(evt);
            }
        });

        btnPostfija.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        btnPostfija.setText("Postfija");
        btnPostfija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostfijaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        jLabel3.setText("Notación Prefjia: ");

        btnLimpiar.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        jLabel4.setText("Notación Postfija:");

        txPrefija.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        txPrefija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txPrefijaActionPerformed(evt);
            }
        });

        txPostfija.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N

        btnSalir.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(29, 29, 29)
                        .addComponent(txInfija))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPrefija)
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)))
                        .addGap(39, 39, 39)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(btnPostfija)
                                .addGap(44, 44, 44)
                                .addComponent(btnLimpiar)
                                .addGap(44, 44, 44)
                                .addComponent(btnSalir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txPrefija)
                            .addComponent(txPostfija))))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(65, 65, 65)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txInfija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrefija)
                    .addComponent(btnPostfija)
                    .addComponent(btnLimpiar)
                    .addComponent(btnSalir))
                .addGap(55, 55, 55)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txPrefija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txPostfija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrefijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrefijaActionPerformed
        String entrada = this.txInfija.getText();
        if (entrada.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo no puede estar vacío");
            return;
        }

        StringBuilder resultado = new StringBuilder();
        StringBuilder inversaEntrada = new StringBuilder(entrada).reverse();
        Stack<Character> pila = new Stack<>();

        for (int i = 0; i < inversaEntrada.length(); i++) {
            char c = inversaEntrada.charAt(i);
            System.out.println("c: " + c);

            if (Character.isDigit(c) || Character.isLetter(c)) {
                resultado.append(c);
            }
            //parentesis de cierre
            else if (c == ')') {
                pila.push(c);
            }
            //paréntesis de apertura
            else if (c == '(') {
                while (!pila.isEmpty() && pila.peek() != ')') {
                    resultado.append(pila.pop());
                }
                // Quitar el paréntesis de cierre de la pila
                if (!pila.isEmpty()) {
                    pila.pop();
                }
            }
            // Si es un operador
            else if (isOperator(c)) {
                // Precedencia de operadores con la pila
                while (!pila.isEmpty() && precedence(pila.peek()) > precedence(c)) {
                    resultado.append(pila.pop());
                }
                pila.push(c);
            }
        }

        // Vaciar los operadores restantes de la pila en el resultado
        while (!pila.isEmpty()) {
            resultado.append(pila.pop());
        }

        // Invertir el resultado para obtener la notación prefija
        this.txPrefija.setText(resultado.reverse().toString());

    }//GEN-LAST:event_btnPrefijaActionPerformed

    private void txPrefijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txPrefijaActionPerformed

    }//GEN-LAST:event_txPrefijaActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.txInfija.setText("");
        this.txPrefija.setText("");
        this.txPostfija.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        JOptionPane.showMessageDialog(null, "Saliendo de la App....");
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnPostfijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostfijaActionPerformed
        String entrada = this.txInfija.getText();

        if (entrada.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo no puede estar vacío");
            return;
        }

        StringBuilder resultado = new StringBuilder();
        Stack<Character> pila = new Stack<>();

        for (int i = 0; i < entrada.length(); i++) {
            char c = entrada.charAt(i);

            if (Character.isDigit(c) || Character.isLetter(c)) {
                resultado.append(c);
            }
            // Paréntesis de apertura
            else if (c == '(') {
                pila.push(c);
            }
            // Paréntesis de cierre, desapilar hasta encontrar el paréntesis de apertura
            else if (c == ')') {
                while (!pila.isEmpty() && pila.peek() != '(') {
                    resultado.append(pila.pop());
                }
                // Quitar el paréntesis de apertura
                if (!pila.isEmpty()) {
                    pila.pop();
                }
            }
            // Si es un operador
            else if (isOperator(c)) {
                // Desapilar operadores de mayor o igual precedencia
                while (!pila.isEmpty() && precedence(pila.peek()) >= precedence(c)) {
                    resultado.append(pila.pop());
                }
                pila.push(c);
            }
        }

        // Desapilar los operadores restantes
        while (!pila.isEmpty()) {
            resultado.append(pila.pop());
        }

        // Mostrar el resultado en el campo de texto postfija
        this.txPostfija.setText(resultado.toString());
    }//GEN-LAST:event_btnPostfijaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnPostfija;
    private javax.swing.JButton btnPrefija;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField txInfija;
    private javax.swing.JTextField txPostfija;
    private javax.swing.JTextField txPrefija;
    // End of variables declaration//GEN-END:variables
}
